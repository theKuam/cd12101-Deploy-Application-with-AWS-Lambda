org: hainm
app: serverless-todo-app
service: serverless-todo-app

plugins:
  - serverless-iam-roles-per-function
  - serverless-offline

frameworkVersion: "3"

provider:
  name: aws
  profile: serverless
  runtime: nodejs20.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    TODOS_TABLE: ${self:service}-hainm18-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENTS_S3_BUCKET: ${self:service}-hainm18-attachments-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 3600
    POLICY_ID: s3PolicyServerless

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          cors: true
          method: get
          path: todos
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_CREATED_AT_INDEX}
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          cors: true
          method: post
          path: todos
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(schemas/create-todo-schema.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
        Resource:
          - "*"
          
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          cors: true
          method: patch
          path: todos/{todoId}
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(schemas/update-todo-schema.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
        Resource:
          - "*"

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          cors: true
          method: delete
          path: todos/{todoId}
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
        Resource:
          - "*"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          cors: true
          method: post
          path: todos/{todoId}/attachment
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*"
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
        Resource:
          - "*"

resources:
  Resources:
    GatewayAPIResponse4xx:
        Type: "AWS::ApiGateway::GatewayResponse"
        Properties:
          ResponseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            gatewayresponse.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
            gatewayresponse.header.Access-Control-Expose-Headers: "'Date,X-Amzn-ErrorType'"
          ResponseType: DEFAULT_4XX
          RestApiId:
            Ref: "ApiGatewayRestApi"
    GatewayAPIResponse5xx:
        Type: "AWS::ApiGateway::GatewayResponse"
        Properties:
          ResponseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            gatewayresponse.header.Access-Control-Expose-Headers: "'Date,X-Amzn-ErrorType'"
          ResponseType: DEFAULT_5XX
          RestApiId:
            Ref: "ApiGatewayRestApi"
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: ${self:provider.environment.POLICY_ID}
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*"
        Bucket: !Ref AttachmentsBucket
